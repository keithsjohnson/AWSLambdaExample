apply plugin: 'java'
apply plugin: 'eclipse'

version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("com.amazonaws:aws-lambda-java-core:1.0.0")
    compile("com.amazonaws:aws-lambda-java-events:1.1.0")
    
    compile("com.amazonaws:aws-java-sdk-dynamodb:1.10.22")
    
    compile("org.springframework:spring-core:4.2.1.RELEASE")
    
    
    
    testCompile group: 'junit', name: 'junit', version: '4.+'
    
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

dependencies {
    compile fileTree(dir: 'jars', include: '*.jar')
}

task buildZip(type: Zip) {
    from compileJava
    from processResources              
    into('lib') {
        from configurations.runtime
    }           
}

build.dependsOn buildZip

//eclipse {
    //classpath {
         //containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         //containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    //}
//}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

plugins.withType(JavaPlugin) {

    eclipse {
        classpath {
            plusConfigurations += [
                configurations.compile,
                configurations.runtime,
                configurations.testCompile,
                configurations.testRuntime
            ]
        }
    }
}

// We only want to create classpaths etc for java projects.
plugins.withType(JavaBasePlugin) {

   build.dependsOn eclipseClasspath
   eclipseClasspath.dependsOn cleanEclipseClasspath
}
